/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.consistent.tracking.model.impl;

import com.liferay.consistent.tracking.model.Browser;
import com.liferay.consistent.tracking.model.BrowserModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Browser service. Represents a row in the &quot;CONSIS_TRACK_Browser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.consistent.tracking.model.BrowserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BrowserImpl}.
 * </p>
 *
 * @author Jorge Loayza Soloisolo
 * @see BrowserImpl
 * @see com.liferay.consistent.tracking.model.Browser
 * @see com.liferay.consistent.tracking.model.BrowserModel
 * @generated
 */
public class BrowserModelImpl extends BaseModelImpl<Browser>
	implements BrowserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a browser model instance should use the {@link com.liferay.consistent.tracking.model.Browser} interface instead.
	 */
	public static final String TABLE_NAME = "CONSIS_TRACK_Browser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "browserId", Types.BIGINT },
			{ "name", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CONSIS_TRACK_Browser (browserId LONG not null primary key,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CONSIS_TRACK_Browser";
	public static final String ORDER_BY_JPQL = " ORDER BY browser.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CONSIS_TRACK_Browser.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.consistent.tracking.model.Browser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.consistent.tracking.model.Browser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.consistent.tracking.model.Browser"),
			true);
	public static long NAME_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.consistent.tracking.model.Browser"));

	public BrowserModelImpl() {
	}

	public long getPrimaryKey() {
		return _browserId;
	}

	public void setPrimaryKey(long primaryKey) {
		setBrowserId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_browserId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Browser.class;
	}

	public String getModelClassName() {
		return Browser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("browserId", getBrowserId());
		attributes.put("name", getName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long browserId = (Long)attributes.get("browserId");

		if (browserId != null) {
			setBrowserId(browserId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	public long getBrowserId() {
		return _browserId;
	}

	public void setBrowserId(long browserId) {
		_browserId = browserId;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Browser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Browser toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Browser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		BrowserImpl browserImpl = new BrowserImpl();

		browserImpl.setBrowserId(getBrowserId());
		browserImpl.setName(getName());

		browserImpl.resetOriginalValues();

		return browserImpl;
	}

	public int compareTo(Browser browser) {
		int value = 0;

		value = getName().compareTo(browser.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Browser browser = null;

		try {
			browser = (Browser)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = browser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BrowserModelImpl browserModelImpl = this;

		browserModelImpl._originalName = browserModelImpl._name;

		browserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Browser> toCacheModel() {
		BrowserCacheModel browserCacheModel = new BrowserCacheModel();

		browserCacheModel.browserId = getBrowserId();

		browserCacheModel.name = getName();

		String name = browserCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			browserCacheModel.name = null;
		}

		return browserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{browserId=");
		sb.append(getBrowserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.consistent.tracking.model.Browser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>browserId</column-name><column-value><![CDATA[");
		sb.append(getBrowserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Browser.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Browser.class
		};
	private long _browserId;
	private String _name;
	private String _originalName;
	private long _columnBitmask;
	private Browser _escapedModelProxy;
}