/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.consistent.tracking.model.impl;

import com.liferay.consistent.tracking.model.Word;
import com.liferay.consistent.tracking.model.WordModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Word service. Represents a row in the &quot;CONSIS_TRACK_Word&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.consistent.tracking.model.WordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WordImpl}.
 * </p>
 *
 * @author Jorge Loayza Soloisolo
 * @see WordImpl
 * @see com.liferay.consistent.tracking.model.Word
 * @see com.liferay.consistent.tracking.model.WordModel
 * @generated
 */
public class WordModelImpl extends BaseModelImpl<Word> implements WordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a word model instance should use the {@link com.liferay.consistent.tracking.model.Word} interface instead.
	 */
	public static final String TABLE_NAME = "CONSIS_TRACK_Word";
	public static final Object[][] TABLE_COLUMNS = {
			{ "wordId", Types.BIGINT },
			{ "wordName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table CONSIS_TRACK_Word (wordId LONG not null primary key,wordName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table CONSIS_TRACK_Word";
	public static final String ORDER_BY_JPQL = " ORDER BY word.wordName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CONSIS_TRACK_Word.wordName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.consistent.tracking.model.Word"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.consistent.tracking.model.Word"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.consistent.tracking.model.Word"),
			true);
	public static long WORDNAME_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.consistent.tracking.model.Word"));

	public WordModelImpl() {
	}

	public long getPrimaryKey() {
		return _wordId;
	}

	public void setPrimaryKey(long primaryKey) {
		setWordId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_wordId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Word.class;
	}

	public String getModelClassName() {
		return Word.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("wordId", getWordId());
		attributes.put("wordName", getWordName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long wordId = (Long)attributes.get("wordId");

		if (wordId != null) {
			setWordId(wordId);
		}

		String wordName = (String)attributes.get("wordName");

		if (wordName != null) {
			setWordName(wordName);
		}
	}

	public long getWordId() {
		return _wordId;
	}

	public void setWordId(long wordId) {
		_wordId = wordId;
	}

	public String getWordName() {
		if (_wordName == null) {
			return StringPool.BLANK;
		}
		else {
			return _wordName;
		}
	}

	public void setWordName(String wordName) {
		_columnBitmask = -1L;

		if (_originalWordName == null) {
			_originalWordName = _wordName;
		}

		_wordName = wordName;
	}

	public String getOriginalWordName() {
		return GetterUtil.getString(_originalWordName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Word.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Word toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Word)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		WordImpl wordImpl = new WordImpl();

		wordImpl.setWordId(getWordId());
		wordImpl.setWordName(getWordName());

		wordImpl.resetOriginalValues();

		return wordImpl;
	}

	public int compareTo(Word word) {
		int value = 0;

		value = getWordName().compareTo(word.getWordName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Word word = null;

		try {
			word = (Word)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = word.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WordModelImpl wordModelImpl = this;

		wordModelImpl._originalWordName = wordModelImpl._wordName;

		wordModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Word> toCacheModel() {
		WordCacheModel wordCacheModel = new WordCacheModel();

		wordCacheModel.wordId = getWordId();

		wordCacheModel.wordName = getWordName();

		String wordName = wordCacheModel.wordName;

		if ((wordName != null) && (wordName.length() == 0)) {
			wordCacheModel.wordName = null;
		}

		return wordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{wordId=");
		sb.append(getWordId());
		sb.append(", wordName=");
		sb.append(getWordName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.consistent.tracking.model.Word");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>wordId</column-name><column-value><![CDATA[");
		sb.append(getWordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>wordName</column-name><column-value><![CDATA[");
		sb.append(getWordName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Word.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Word.class
		};
	private long _wordId;
	private String _wordName;
	private String _originalWordName;
	private long _columnBitmask;
	private Word _escapedModelProxy;
}