/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.consistent.tracking.model.impl;

import com.liferay.consistent.tracking.model.Phrase;
import com.liferay.consistent.tracking.model.PhraseModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Phrase service. Represents a row in the &quot;CONSIS_TRACK_Phrase&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.consistent.tracking.model.PhraseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PhraseImpl}.
 * </p>
 *
 * @author Jorge Loayza Soloisolo
 * @see PhraseImpl
 * @see com.liferay.consistent.tracking.model.Phrase
 * @see com.liferay.consistent.tracking.model.PhraseModel
 * @generated
 */
public class PhraseModelImpl extends BaseModelImpl<Phrase>
	implements PhraseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a phrase model instance should use the {@link com.liferay.consistent.tracking.model.Phrase} interface instead.
	 */
	public static final String TABLE_NAME = "CONSIS_TRACK_Phrase";
	public static final Object[][] TABLE_COLUMNS = {
			{ "phraseId", Types.BIGINT },
			{ "phraseName", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table CONSIS_TRACK_Phrase (phraseId LONG not null primary key,phraseName TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table CONSIS_TRACK_Phrase";
	public static final String ORDER_BY_JPQL = " ORDER BY phrase.phraseName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CONSIS_TRACK_Phrase.phraseName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.consistent.tracking.model.Phrase"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.consistent.tracking.model.Phrase"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.consistent.tracking.model.Phrase"),
			true);
	public static long PHRASENAME_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.consistent.tracking.model.Phrase"));

	public PhraseModelImpl() {
	}

	public long getPrimaryKey() {
		return _phraseId;
	}

	public void setPrimaryKey(long primaryKey) {
		setPhraseId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_phraseId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Phrase.class;
	}

	public String getModelClassName() {
		return Phrase.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("phraseId", getPhraseId());
		attributes.put("phraseName", getPhraseName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long phraseId = (Long)attributes.get("phraseId");

		if (phraseId != null) {
			setPhraseId(phraseId);
		}

		String phraseName = (String)attributes.get("phraseName");

		if (phraseName != null) {
			setPhraseName(phraseName);
		}
	}

	public long getPhraseId() {
		return _phraseId;
	}

	public void setPhraseId(long phraseId) {
		_phraseId = phraseId;
	}

	public String getPhraseName() {
		if (_phraseName == null) {
			return StringPool.BLANK;
		}
		else {
			return _phraseName;
		}
	}

	public void setPhraseName(String phraseName) {
		_columnBitmask = -1L;

		if (_originalPhraseName == null) {
			_originalPhraseName = _phraseName;
		}

		_phraseName = phraseName;
	}

	public String getOriginalPhraseName() {
		return GetterUtil.getString(_originalPhraseName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Phrase.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Phrase toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Phrase)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PhraseImpl phraseImpl = new PhraseImpl();

		phraseImpl.setPhraseId(getPhraseId());
		phraseImpl.setPhraseName(getPhraseName());

		phraseImpl.resetOriginalValues();

		return phraseImpl;
	}

	public int compareTo(Phrase phrase) {
		int value = 0;

		value = getPhraseName().compareTo(phrase.getPhraseName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Phrase phrase = null;

		try {
			phrase = (Phrase)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = phrase.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PhraseModelImpl phraseModelImpl = this;

		phraseModelImpl._originalPhraseName = phraseModelImpl._phraseName;

		phraseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Phrase> toCacheModel() {
		PhraseCacheModel phraseCacheModel = new PhraseCacheModel();

		phraseCacheModel.phraseId = getPhraseId();

		phraseCacheModel.phraseName = getPhraseName();

		String phraseName = phraseCacheModel.phraseName;

		if ((phraseName != null) && (phraseName.length() == 0)) {
			phraseCacheModel.phraseName = null;
		}

		return phraseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{phraseId=");
		sb.append(getPhraseId());
		sb.append(", phraseName=");
		sb.append(getPhraseName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.consistent.tracking.model.Phrase");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>phraseId</column-name><column-value><![CDATA[");
		sb.append(getPhraseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phraseName</column-name><column-value><![CDATA[");
		sb.append(getPhraseName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Phrase.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Phrase.class
		};
	private long _phraseId;
	private String _phraseName;
	private String _originalPhraseName;
	private long _columnBitmask;
	private Phrase _escapedModelProxy;
}