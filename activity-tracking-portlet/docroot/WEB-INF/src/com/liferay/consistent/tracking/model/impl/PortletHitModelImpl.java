/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.consistent.tracking.model.impl;

import com.liferay.consistent.tracking.model.PortletHit;
import com.liferay.consistent.tracking.model.PortletHitModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PortletHit service. Represents a row in the &quot;CONSIS_TRACK_PortletHit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.consistent.tracking.model.PortletHitModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PortletHitImpl}.
 * </p>
 *
 * @author Jorge Loayza Soloisolo
 * @see PortletHitImpl
 * @see com.liferay.consistent.tracking.model.PortletHit
 * @see com.liferay.consistent.tracking.model.PortletHitModel
 * @generated
 */
public class PortletHitModelImpl extends BaseModelImpl<PortletHit>
	implements PortletHitModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a portlet hit model instance should use the {@link com.liferay.consistent.tracking.model.PortletHit} interface instead.
	 */
	public static final String TABLE_NAME = "CONSIS_TRACK_PortletHit";
	public static final Object[][] TABLE_COLUMNS = {
			{ "hitId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "portletId", Types.VARCHAR },
			{ "guest", Types.BOOLEAN },
			{ "userId", Types.BIGINT },
			{ "userlogId", Types.BIGINT },
			{ "accessDate", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table CONSIS_TRACK_PortletHit (hitId LONG not null primary key,companyId LONG,portletId VARCHAR(75) null,guest BOOLEAN,userId LONG,userlogId LONG,accessDate LONG)";
	public static final String TABLE_SQL_DROP = "drop table CONSIS_TRACK_PortletHit";
	public static final String ORDER_BY_JPQL = " ORDER BY portletHit.portletId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY CONSIS_TRACK_PortletHit.portletId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.consistent.tracking.model.PortletHit"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.consistent.tracking.model.PortletHit"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.consistent.tracking.model.PortletHit"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GUEST_COLUMN_BITMASK = 2L;
	public static long PORTLETID_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.consistent.tracking.model.PortletHit"));

	public PortletHitModelImpl() {
	}

	public long getPrimaryKey() {
		return _hitId;
	}

	public void setPrimaryKey(long primaryKey) {
		setHitId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_hitId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return PortletHit.class;
	}

	public String getModelClassName() {
		return PortletHit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("hitId", getHitId());
		attributes.put("companyId", getCompanyId());
		attributes.put("portletId", getPortletId());
		attributes.put("guest", getGuest());
		attributes.put("userId", getUserId());
		attributes.put("userlogId", getUserlogId());
		attributes.put("accessDate", getAccessDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long hitId = (Long)attributes.get("hitId");

		if (hitId != null) {
			setHitId(hitId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String portletId = (String)attributes.get("portletId");

		if (portletId != null) {
			setPortletId(portletId);
		}

		Boolean guest = (Boolean)attributes.get("guest");

		if (guest != null) {
			setGuest(guest);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long userlogId = (Long)attributes.get("userlogId");

		if (userlogId != null) {
			setUserlogId(userlogId);
		}

		Long accessDate = (Long)attributes.get("accessDate");

		if (accessDate != null) {
			setAccessDate(accessDate);
		}
	}

	public long getHitId() {
		return _hitId;
	}

	public void setHitId(long hitId) {
		_hitId = hitId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public String getPortletId() {
		if (_portletId == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletId;
		}
	}

	public void setPortletId(String portletId) {
		_columnBitmask = -1L;

		if (_originalPortletId == null) {
			_originalPortletId = _portletId;
		}

		_portletId = portletId;
	}

	public String getOriginalPortletId() {
		return GetterUtil.getString(_originalPortletId);
	}

	public boolean getGuest() {
		return _guest;
	}

	public boolean isGuest() {
		return _guest;
	}

	public void setGuest(boolean guest) {
		_columnBitmask |= GUEST_COLUMN_BITMASK;

		if (!_setOriginalGuest) {
			_setOriginalGuest = true;

			_originalGuest = _guest;
		}

		_guest = guest;
	}

	public boolean getOriginalGuest() {
		return _originalGuest;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getUserlogId() {
		return _userlogId;
	}

	public void setUserlogId(long userlogId) {
		_userlogId = userlogId;
	}

	public long getAccessDate() {
		return _accessDate;
	}

	public void setAccessDate(long accessDate) {
		_accessDate = accessDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PortletHit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PortletHit toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (PortletHit)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		PortletHitImpl portletHitImpl = new PortletHitImpl();

		portletHitImpl.setHitId(getHitId());
		portletHitImpl.setCompanyId(getCompanyId());
		portletHitImpl.setPortletId(getPortletId());
		portletHitImpl.setGuest(getGuest());
		portletHitImpl.setUserId(getUserId());
		portletHitImpl.setUserlogId(getUserlogId());
		portletHitImpl.setAccessDate(getAccessDate());

		portletHitImpl.resetOriginalValues();

		return portletHitImpl;
	}

	public int compareTo(PortletHit portletHit) {
		int value = 0;

		value = getPortletId().compareTo(portletHit.getPortletId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		PortletHit portletHit = null;

		try {
			portletHit = (PortletHit)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = portletHit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PortletHitModelImpl portletHitModelImpl = this;

		portletHitModelImpl._originalCompanyId = portletHitModelImpl._companyId;

		portletHitModelImpl._setOriginalCompanyId = false;

		portletHitModelImpl._originalPortletId = portletHitModelImpl._portletId;

		portletHitModelImpl._originalGuest = portletHitModelImpl._guest;

		portletHitModelImpl._setOriginalGuest = false;

		portletHitModelImpl._originalUserId = portletHitModelImpl._userId;

		portletHitModelImpl._setOriginalUserId = false;

		portletHitModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PortletHit> toCacheModel() {
		PortletHitCacheModel portletHitCacheModel = new PortletHitCacheModel();

		portletHitCacheModel.hitId = getHitId();

		portletHitCacheModel.companyId = getCompanyId();

		portletHitCacheModel.portletId = getPortletId();

		String portletId = portletHitCacheModel.portletId;

		if ((portletId != null) && (portletId.length() == 0)) {
			portletHitCacheModel.portletId = null;
		}

		portletHitCacheModel.guest = getGuest();

		portletHitCacheModel.userId = getUserId();

		portletHitCacheModel.userlogId = getUserlogId();

		portletHitCacheModel.accessDate = getAccessDate();

		return portletHitCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{hitId=");
		sb.append(getHitId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", portletId=");
		sb.append(getPortletId());
		sb.append(", guest=");
		sb.append(getGuest());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userlogId=");
		sb.append(getUserlogId());
		sb.append(", accessDate=");
		sb.append(getAccessDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.consistent.tracking.model.PortletHit");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>hitId</column-name><column-value><![CDATA[");
		sb.append(getHitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletId</column-name><column-value><![CDATA[");
		sb.append(getPortletId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>guest</column-name><column-value><![CDATA[");
		sb.append(getGuest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userlogId</column-name><column-value><![CDATA[");
		sb.append(getUserlogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessDate</column-name><column-value><![CDATA[");
		sb.append(getAccessDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PortletHit.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			PortletHit.class
		};
	private long _hitId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _portletId;
	private String _originalPortletId;
	private boolean _guest;
	private boolean _originalGuest;
	private boolean _setOriginalGuest;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _userlogId;
	private long _accessDate;
	private long _columnBitmask;
	private PortletHit _escapedModelProxy;
}