/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.consistent.tracking.model.impl;

import com.liferay.consistent.tracking.model.TrackEvent;
import com.liferay.consistent.tracking.model.TrackEventModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TrackEvent service. Represents a row in the &quot;CONSIS_TRACK_TrackEvent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.consistent.tracking.model.TrackEventModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TrackEventImpl}.
 * </p>
 *
 * @author Jorge Loayza Soloisolo
 * @see TrackEventImpl
 * @see com.liferay.consistent.tracking.model.TrackEvent
 * @see com.liferay.consistent.tracking.model.TrackEventModel
 * @generated
 */
public class TrackEventModelImpl extends BaseModelImpl<TrackEvent>
	implements TrackEventModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a track event model instance should use the {@link com.liferay.consistent.tracking.model.TrackEvent} interface instead.
	 */
	public static final String TABLE_NAME = "CONSIS_TRACK_TrackEvent";
	public static final Object[][] TABLE_COLUMNS = {
			{ "trackEventId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.BIGINT },
			{ "userlogId", Types.BIGINT },
			{ "eventType", Types.VARCHAR },
			{ "className", Types.VARCHAR },
			{ "classPK", Types.VARCHAR },
			{ "message", Types.VARCHAR },
			{ "clientHost", Types.VARCHAR },
			{ "clientAddr", Types.VARCHAR },
			{ "serverName", Types.VARCHAR },
			{ "serverPort", Types.INTEGER },
			{ "additionalInfo", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table CONSIS_TRACK_TrackEvent (trackEventId LONG not null primary key,companyId LONG,userName VARCHAR(200) null,createDate LONG,userlogId LONG,eventType VARCHAR(75) null,className VARCHAR(200) null,classPK VARCHAR(75) null,message VARCHAR(75) null,clientHost VARCHAR(255) null,clientAddr VARCHAR(75) null,serverName VARCHAR(255) null,serverPort INTEGER,additionalInfo TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table CONSIS_TRACK_TrackEvent";
	public static final String ORDER_BY_JPQL = " ORDER BY trackEvent.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY CONSIS_TRACK_TrackEvent.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.consistent.tracking.model.TrackEvent"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.consistent.tracking.model.TrackEvent"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.consistent.tracking.model.TrackEvent"),
			true);
	public static long CLASSNAME_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long EVENTTYPE_COLUMN_BITMASK = 4L;
	public static long USERLOGID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.consistent.tracking.model.TrackEvent"));

	public TrackEventModelImpl() {
	}

	public long getPrimaryKey() {
		return _trackEventId;
	}

	public void setPrimaryKey(long primaryKey) {
		setTrackEventId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_trackEventId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TrackEvent.class;
	}

	public String getModelClassName() {
		return TrackEvent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("trackEventId", getTrackEventId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("userlogId", getUserlogId());
		attributes.put("eventType", getEventType());
		attributes.put("className", getClassName());
		attributes.put("classPK", getClassPK());
		attributes.put("message", getMessage());
		attributes.put("clientHost", getClientHost());
		attributes.put("clientAddr", getClientAddr());
		attributes.put("serverName", getServerName());
		attributes.put("serverPort", getServerPort());
		attributes.put("additionalInfo", getAdditionalInfo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long trackEventId = (Long)attributes.get("trackEventId");

		if (trackEventId != null) {
			setTrackEventId(trackEventId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Long createDate = (Long)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long userlogId = (Long)attributes.get("userlogId");

		if (userlogId != null) {
			setUserlogId(userlogId);
		}

		String eventType = (String)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		String classPK = (String)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		String clientHost = (String)attributes.get("clientHost");

		if (clientHost != null) {
			setClientHost(clientHost);
		}

		String clientAddr = (String)attributes.get("clientAddr");

		if (clientAddr != null) {
			setClientAddr(clientAddr);
		}

		String serverName = (String)attributes.get("serverName");

		if (serverName != null) {
			setServerName(serverName);
		}

		Integer serverPort = (Integer)attributes.get("serverPort");

		if (serverPort != null) {
			setServerPort(serverPort);
		}

		String additionalInfo = (String)attributes.get("additionalInfo");

		if (additionalInfo != null) {
			setAdditionalInfo(additionalInfo);
		}
	}

	public long getTrackEventId() {
		return _trackEventId;
	}

	public void setTrackEventId(long trackEventId) {
		_trackEventId = trackEventId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public long getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(long createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	public long getUserlogId() {
		return _userlogId;
	}

	public void setUserlogId(long userlogId) {
		_columnBitmask |= USERLOGID_COLUMN_BITMASK;

		if (!_setOriginalUserlogId) {
			_setOriginalUserlogId = true;

			_originalUserlogId = _userlogId;
		}

		_userlogId = userlogId;
	}

	public long getOriginalUserlogId() {
		return _originalUserlogId;
	}

	public String getEventType() {
		if (_eventType == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventType;
		}
	}

	public void setEventType(String eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (_originalEventType == null) {
			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public String getOriginalEventType() {
		return GetterUtil.getString(_originalEventType);
	}

	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	public String getClassPK() {
		if (_classPK == null) {
			return StringPool.BLANK;
		}
		else {
			return _classPK;
		}
	}

	public void setClassPK(String classPK) {
		_classPK = classPK;
	}

	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	public void setMessage(String message) {
		_message = message;
	}

	public String getClientHost() {
		if (_clientHost == null) {
			return StringPool.BLANK;
		}
		else {
			return _clientHost;
		}
	}

	public void setClientHost(String clientHost) {
		_clientHost = clientHost;
	}

	public String getClientAddr() {
		if (_clientAddr == null) {
			return StringPool.BLANK;
		}
		else {
			return _clientAddr;
		}
	}

	public void setClientAddr(String clientAddr) {
		_clientAddr = clientAddr;
	}

	public String getServerName() {
		if (_serverName == null) {
			return StringPool.BLANK;
		}
		else {
			return _serverName;
		}
	}

	public void setServerName(String serverName) {
		_serverName = serverName;
	}

	public int getServerPort() {
		return _serverPort;
	}

	public void setServerPort(int serverPort) {
		_serverPort = serverPort;
	}

	public String getAdditionalInfo() {
		if (_additionalInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalInfo;
		}
	}

	public void setAdditionalInfo(String additionalInfo) {
		_additionalInfo = additionalInfo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TrackEvent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TrackEvent toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TrackEvent)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TrackEventImpl trackEventImpl = new TrackEventImpl();

		trackEventImpl.setTrackEventId(getTrackEventId());
		trackEventImpl.setCompanyId(getCompanyId());
		trackEventImpl.setUserName(getUserName());
		trackEventImpl.setCreateDate(getCreateDate());
		trackEventImpl.setUserlogId(getUserlogId());
		trackEventImpl.setEventType(getEventType());
		trackEventImpl.setClassName(getClassName());
		trackEventImpl.setClassPK(getClassPK());
		trackEventImpl.setMessage(getMessage());
		trackEventImpl.setClientHost(getClientHost());
		trackEventImpl.setClientAddr(getClientAddr());
		trackEventImpl.setServerName(getServerName());
		trackEventImpl.setServerPort(getServerPort());
		trackEventImpl.setAdditionalInfo(getAdditionalInfo());

		trackEventImpl.resetOriginalValues();

		return trackEventImpl;
	}

	public int compareTo(TrackEvent trackEvent) {
		int value = 0;

		if (getCreateDate() < trackEvent.getCreateDate()) {
			value = -1;
		}
		else if (getCreateDate() > trackEvent.getCreateDate()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TrackEvent trackEvent = null;

		try {
			trackEvent = (TrackEvent)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = trackEvent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TrackEventModelImpl trackEventModelImpl = this;

		trackEventModelImpl._originalCompanyId = trackEventModelImpl._companyId;

		trackEventModelImpl._setOriginalCompanyId = false;

		trackEventModelImpl._originalUserlogId = trackEventModelImpl._userlogId;

		trackEventModelImpl._setOriginalUserlogId = false;

		trackEventModelImpl._originalEventType = trackEventModelImpl._eventType;

		trackEventModelImpl._originalClassName = trackEventModelImpl._className;

		trackEventModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TrackEvent> toCacheModel() {
		TrackEventCacheModel trackEventCacheModel = new TrackEventCacheModel();

		trackEventCacheModel.trackEventId = getTrackEventId();

		trackEventCacheModel.companyId = getCompanyId();

		trackEventCacheModel.userName = getUserName();

		String userName = trackEventCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			trackEventCacheModel.userName = null;
		}

		trackEventCacheModel.createDate = getCreateDate();

		trackEventCacheModel.userlogId = getUserlogId();

		trackEventCacheModel.eventType = getEventType();

		String eventType = trackEventCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			trackEventCacheModel.eventType = null;
		}

		trackEventCacheModel.className = getClassName();

		String className = trackEventCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			trackEventCacheModel.className = null;
		}

		trackEventCacheModel.classPK = getClassPK();

		String classPK = trackEventCacheModel.classPK;

		if ((classPK != null) && (classPK.length() == 0)) {
			trackEventCacheModel.classPK = null;
		}

		trackEventCacheModel.message = getMessage();

		String message = trackEventCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			trackEventCacheModel.message = null;
		}

		trackEventCacheModel.clientHost = getClientHost();

		String clientHost = trackEventCacheModel.clientHost;

		if ((clientHost != null) && (clientHost.length() == 0)) {
			trackEventCacheModel.clientHost = null;
		}

		trackEventCacheModel.clientAddr = getClientAddr();

		String clientAddr = trackEventCacheModel.clientAddr;

		if ((clientAddr != null) && (clientAddr.length() == 0)) {
			trackEventCacheModel.clientAddr = null;
		}

		trackEventCacheModel.serverName = getServerName();

		String serverName = trackEventCacheModel.serverName;

		if ((serverName != null) && (serverName.length() == 0)) {
			trackEventCacheModel.serverName = null;
		}

		trackEventCacheModel.serverPort = getServerPort();

		trackEventCacheModel.additionalInfo = getAdditionalInfo();

		String additionalInfo = trackEventCacheModel.additionalInfo;

		if ((additionalInfo != null) && (additionalInfo.length() == 0)) {
			trackEventCacheModel.additionalInfo = null;
		}

		return trackEventCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{trackEventId=");
		sb.append(getTrackEventId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", userlogId=");
		sb.append(getUserlogId());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", clientHost=");
		sb.append(getClientHost());
		sb.append(", clientAddr=");
		sb.append(getClientAddr());
		sb.append(", serverName=");
		sb.append(getServerName());
		sb.append(", serverPort=");
		sb.append(getServerPort());
		sb.append(", additionalInfo=");
		sb.append(getAdditionalInfo());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.liferay.consistent.tracking.model.TrackEvent");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>trackEventId</column-name><column-value><![CDATA[");
		sb.append(getTrackEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userlogId</column-name><column-value><![CDATA[");
		sb.append(getUserlogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientHost</column-name><column-value><![CDATA[");
		sb.append(getClientHost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientAddr</column-name><column-value><![CDATA[");
		sb.append(getClientAddr());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serverName</column-name><column-value><![CDATA[");
		sb.append(getServerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serverPort</column-name><column-value><![CDATA[");
		sb.append(getServerPort());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalInfo</column-name><column-value><![CDATA[");
		sb.append(getAdditionalInfo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TrackEvent.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TrackEvent.class
		};
	private long _trackEventId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _userName;
	private long _createDate;
	private long _userlogId;
	private long _originalUserlogId;
	private boolean _setOriginalUserlogId;
	private String _eventType;
	private String _originalEventType;
	private String _className;
	private String _originalClassName;
	private String _classPK;
	private String _message;
	private String _clientHost;
	private String _clientAddr;
	private String _serverName;
	private int _serverPort;
	private String _additionalInfo;
	private long _columnBitmask;
	private TrackEvent _escapedModelProxy;
}