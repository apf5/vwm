/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mx.com.vw.jhanlos.ads.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import mx.com.vw.jhanlos.ads.model.MailboxAdmin;
import mx.com.vw.jhanlos.ads.model.MailboxAdminModel;
import mx.com.vw.jhanlos.ads.model.MailboxAdminSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MailboxAdmin service. Represents a row in the &quot;vwm_ads_MailboxAdmin&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link mx.com.vw.jhanlos.ads.model.MailboxAdminModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MailboxAdminImpl}.
 * </p>
 *
 * @author Jorge Loayza
 * @see MailboxAdminImpl
 * @see mx.com.vw.jhanlos.ads.model.MailboxAdmin
 * @see mx.com.vw.jhanlos.ads.model.MailboxAdminModel
 * @generated
 */
@JSON(strict = true)
public class MailboxAdminModelImpl extends BaseModelImpl<MailboxAdmin>
	implements MailboxAdminModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mailbox admin model instance should use the {@link mx.com.vw.jhanlos.ads.model.MailboxAdmin} interface instead.
	 */
	public static final String TABLE_NAME = "vwm_ads_MailboxAdmin";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mailboxAdminId", Types.BIGINT },
			{ "createDate", Types.BIGINT },
			{ "modifiedDate", Types.BIGINT },
			{ "mailboxId", Types.BIGINT },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table vwm_ads_MailboxAdmin (mailboxAdminId LONG not null primary key,createDate LONG,modifiedDate LONG,mailboxId LONG,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table vwm_ads_MailboxAdmin";
	public static final String ORDER_BY_JPQL = " ORDER BY mailboxAdmin.mailboxId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vwm_ads_MailboxAdmin.mailboxId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.mx.com.vw.jhanlos.ads.model.MailboxAdmin"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.mx.com.vw.jhanlos.ads.model.MailboxAdmin"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MailboxAdmin toModel(MailboxAdminSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MailboxAdmin model = new MailboxAdminImpl();

		model.setMailboxAdminId(soapModel.getMailboxAdminId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMailboxId(soapModel.getMailboxId());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MailboxAdmin> toModels(MailboxAdminSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MailboxAdmin> models = new ArrayList<MailboxAdmin>(soapModels.length);

		for (MailboxAdminSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.mx.com.vw.jhanlos.ads.model.MailboxAdmin"));

	public MailboxAdminModelImpl() {
	}

	public long getPrimaryKey() {
		return _mailboxAdminId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMailboxAdminId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_mailboxAdminId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return MailboxAdmin.class;
	}

	public String getModelClassName() {
		return MailboxAdmin.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mailboxAdminId", getMailboxAdminId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("mailboxId", getMailboxId());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long mailboxAdminId = (Long)attributes.get("mailboxAdminId");

		if (mailboxAdminId != null) {
			setMailboxAdminId(mailboxAdminId);
		}

		Long createDate = (Long)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long modifiedDate = (Long)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long mailboxId = (Long)attributes.get("mailboxId");

		if (mailboxId != null) {
			setMailboxId(mailboxId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	public long getMailboxAdminId() {
		return _mailboxAdminId;
	}

	public void setMailboxAdminId(long mailboxAdminId) {
		_mailboxAdminId = mailboxAdminId;
	}

	@JSON
	public long getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(long createDate) {
		_createDate = createDate;
	}

	@JSON
	public long getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(long modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getMailboxId() {
		return _mailboxId;
	}

	public void setMailboxId(long mailboxId) {
		_mailboxId = mailboxId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			MailboxAdmin.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MailboxAdmin toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (MailboxAdmin)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		MailboxAdminImpl mailboxAdminImpl = new MailboxAdminImpl();

		mailboxAdminImpl.setMailboxAdminId(getMailboxAdminId());
		mailboxAdminImpl.setCreateDate(getCreateDate());
		mailboxAdminImpl.setModifiedDate(getModifiedDate());
		mailboxAdminImpl.setMailboxId(getMailboxId());
		mailboxAdminImpl.setUserId(getUserId());

		mailboxAdminImpl.resetOriginalValues();

		return mailboxAdminImpl;
	}

	public int compareTo(MailboxAdmin mailboxAdmin) {
		int value = 0;

		if (getMailboxId() < mailboxAdmin.getMailboxId()) {
			value = -1;
		}
		else if (getMailboxId() > mailboxAdmin.getMailboxId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		MailboxAdmin mailboxAdmin = null;

		try {
			mailboxAdmin = (MailboxAdmin)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = mailboxAdmin.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MailboxAdmin> toCacheModel() {
		MailboxAdminCacheModel mailboxAdminCacheModel = new MailboxAdminCacheModel();

		mailboxAdminCacheModel.mailboxAdminId = getMailboxAdminId();

		mailboxAdminCacheModel.createDate = getCreateDate();

		mailboxAdminCacheModel.modifiedDate = getModifiedDate();

		mailboxAdminCacheModel.mailboxId = getMailboxId();

		mailboxAdminCacheModel.userId = getUserId();

		return mailboxAdminCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{mailboxAdminId=");
		sb.append(getMailboxAdminId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", mailboxId=");
		sb.append(getMailboxId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("mx.com.vw.jhanlos.ads.model.MailboxAdmin");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mailboxAdminId</column-name><column-value><![CDATA[");
		sb.append(getMailboxAdminId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mailboxId</column-name><column-value><![CDATA[");
		sb.append(getMailboxId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MailboxAdmin.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			MailboxAdmin.class
		};
	private long _mailboxAdminId;
	private long _createDate;
	private long _modifiedDate;
	private long _mailboxId;
	private long _userId;
	private String _userUuid;
	private MailboxAdmin _escapedModelProxy;
}