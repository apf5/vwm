/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package mx.com.vw.jhanlos.ads.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import mx.com.vw.jhanlos.ads.model.Mailbox;
import mx.com.vw.jhanlos.ads.model.MailboxModel;
import mx.com.vw.jhanlos.ads.model.MailboxSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Mailbox service. Represents a row in the &quot;vwm_ads_Mailbox&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link mx.com.vw.jhanlos.ads.model.MailboxModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MailboxImpl}.
 * </p>
 *
 * @author Jorge Loayza
 * @see MailboxImpl
 * @see mx.com.vw.jhanlos.ads.model.Mailbox
 * @see mx.com.vw.jhanlos.ads.model.MailboxModel
 * @generated
 */
@JSON(strict = true)
public class MailboxModelImpl extends BaseModelImpl<Mailbox>
	implements MailboxModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mailbox model instance should use the {@link mx.com.vw.jhanlos.ads.model.Mailbox} interface instead.
	 */
	public static final String TABLE_NAME = "vwm_ads_Mailbox";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mailboxId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.BIGINT },
			{ "modifiedDate", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "iconId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table vwm_ads_Mailbox (mailboxId LONG not null primary key,companyId LONG,userId LONG,createDate LONG,modifiedDate LONG,name VARCHAR(75) null,iconId LONG)";
	public static final String TABLE_SQL_DROP = "drop table vwm_ads_Mailbox";
	public static final String ORDER_BY_JPQL = " ORDER BY mailbox.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY vwm_ads_Mailbox.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.mx.com.vw.jhanlos.ads.model.Mailbox"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.mx.com.vw.jhanlos.ads.model.Mailbox"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Mailbox toModel(MailboxSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Mailbox model = new MailboxImpl();

		model.setMailboxId(soapModel.getMailboxId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setIconId(soapModel.getIconId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Mailbox> toModels(MailboxSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Mailbox> models = new ArrayList<Mailbox>(soapModels.length);

		for (MailboxSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.mx.com.vw.jhanlos.ads.model.Mailbox"));

	public MailboxModelImpl() {
	}

	public long getPrimaryKey() {
		return _mailboxId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMailboxId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_mailboxId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Mailbox.class;
	}

	public String getModelClassName() {
		return Mailbox.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mailboxId", getMailboxId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("iconId", getIconId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long mailboxId = (Long)attributes.get("mailboxId");

		if (mailboxId != null) {
			setMailboxId(mailboxId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long createDate = (Long)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long modifiedDate = (Long)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long iconId = (Long)attributes.get("iconId");

		if (iconId != null) {
			setIconId(iconId);
		}
	}

	@JSON
	public long getMailboxId() {
		return _mailboxId;
	}

	public void setMailboxId(long mailboxId) {
		_mailboxId = mailboxId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public long getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(long createDate) {
		_createDate = createDate;
	}

	@JSON
	public long getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(long modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public long getIconId() {
		return _iconId;
	}

	public void setIconId(long iconId) {
		_iconId = iconId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Mailbox.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Mailbox toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Mailbox)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		MailboxImpl mailboxImpl = new MailboxImpl();

		mailboxImpl.setMailboxId(getMailboxId());
		mailboxImpl.setCompanyId(getCompanyId());
		mailboxImpl.setUserId(getUserId());
		mailboxImpl.setCreateDate(getCreateDate());
		mailboxImpl.setModifiedDate(getModifiedDate());
		mailboxImpl.setName(getName());
		mailboxImpl.setIconId(getIconId());

		mailboxImpl.resetOriginalValues();

		return mailboxImpl;
	}

	public int compareTo(Mailbox mailbox) {
		int value = 0;

		value = getName().compareTo(mailbox.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Mailbox mailbox = null;

		try {
			mailbox = (Mailbox)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = mailbox.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Mailbox> toCacheModel() {
		MailboxCacheModel mailboxCacheModel = new MailboxCacheModel();

		mailboxCacheModel.mailboxId = getMailboxId();

		mailboxCacheModel.companyId = getCompanyId();

		mailboxCacheModel.userId = getUserId();

		mailboxCacheModel.createDate = getCreateDate();

		mailboxCacheModel.modifiedDate = getModifiedDate();

		mailboxCacheModel.name = getName();

		String name = mailboxCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			mailboxCacheModel.name = null;
		}

		mailboxCacheModel.iconId = getIconId();

		return mailboxCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{mailboxId=");
		sb.append(getMailboxId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", iconId=");
		sb.append(getIconId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("mx.com.vw.jhanlos.ads.model.Mailbox");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mailboxId</column-name><column-value><![CDATA[");
		sb.append(getMailboxId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iconId</column-name><column-value><![CDATA[");
		sb.append(getIconId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Mailbox.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Mailbox.class
		};
	private long _mailboxId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _createDate;
	private long _modifiedDate;
	private String _name;
	private long _iconId;
	private Mailbox _escapedModelProxy;
}